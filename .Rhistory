}
for (i in 1:57) {
CompareVector<-StandardizedVectorList[[i]]
Count<-0
for (j in 1:length(CompareVector)) {
Count<-Count+sum(grepl(CompareVector[j],UsedEVTYPES))
}
Type<-CompareVector[1]
print(Type); print(Count)
}
#assigns standard event codes based on EVTYPE
#
StdEventCodes<-c("Astronomical Low Tide","Avalanche","Blizzard","Coastal Flood","Cold/Wind Chill","Debris Flow","Dense Fog","Dense Smoke","Drought","Dust Devil","Dust Storm","Excessive Heat","Extreme Cold/Wind Chill","Flash Flood","Flood","Frost/Freeze","Funnel Cloud","Freezing Fog","Hail","Heat","Heavy Rain","Heavy Snow","High Surf","High Wind","Hurricane (Typhoon)","Ice Storm","Lake-Effect Snow","Lakeshore Flood","Lightning","Marine Hail","Marine High Wind","Marine Strong Wind","Marine Thunderstorm Wind","Rip Current","Seiche","Sleet","Storm Surge/Tide","Strong Wind","Thunderstorm Wind","Tornado","Tropical Depression","Tropical Storm","Tsunami","Volcanic Ash","Waterspout","Wildfire","Winter Storm","Winter Weather","Unclassifiable")
#length(StdEventCodes)
UsedEVTYPES<-as.character(unique(StormData$EVTYPE))
##Input list for EVTYPES Conversion to StandardEvTypes
StandardizedVectorList<-list(
as.character(c("Marine Thunderstorm Wind","MARINE THUNDERSTORM WIND","marine thunderstorm wind")),
as.character(c("Tropical Depression","TROPICAL DEPRESSION","tropical depression")),
as.character(c("Marine Strong Wind","MARINE STRONG WIND","marine strong wind")),
as.character(c("Marine High Wind","MARINE HIGH WIND","marine high wind")),
as.character(c("Excessive Heat","EXCESSIVE HEAT","excessive heat")),
as.character(c("Tropical Storm","TROPICAL STORM","tropical storm")),
as.character(c("Winter Storm","WINTER STORM","winter storm")),
as.character(c("Marine Hail","MARINE HAIL","marine hail")),
as.character(c("Waterspout","WATERSPOUT","waterspout")),
as.character(c("High Surf","HIGH SURF","high surf")),
as.character(c("Seiche","SEICHE","seiche")),
as.character(c("Sleet","SLEET","sleet")),
as.character(c("Extreme Cold/Wind Chill","EXTREME COLD/WIND CHILL","extreme cold/wind chill","Extreme Cold","EXTREME COLD","extreme cold")),
as.character(c("Flash Flood","FLASH FLOOD","flash flood","sudden flood","SUDDEN FLOOD","Sudden Flood")),
as.character(c("Coastal Flood","COASTAL FLOOD","coastal flood","Coastal","coastal","COASTAL")),
as.character(c("Volcanic Ash","VOLCANIC ASH","volcanic ash","Volcano","VOLCANO","volcano")),
as.character(c("Funnel Cloud","FUNNEL CLOUD","funnel cloud","funnel","FUNNEL","Funnel")),
as.character(c("Dense Smoke","DENSE SMOKE","dense smoke","Smoke","SMOKE","smoke")),
as.character(c("Dense Fog","DENSE FOG","dense fog","Fog","FOG","fog")),
as.character(c("Blizzard","BLIZZARD","blizzard","blowing snow","BLOWING SNOW","Blowing snow","Blowing Snow")),
as.character(c("Tsunami","TSUNAMI","tsunami","tidalwave","TIDAL WAVE","Tidal Wave","Tidal wave")),
as.character(c("Tornado","TORNADO","tornado","Tornadoe","TORNADOE","tornadoe")),
as.character(c("Heavy Snow","HEAVY SNOW","heavy snow","snowstorm","snow storm","snow fall","snowfall","excessive snow")),
as.character(c("Freezing Fog","FREEZING FOG","freezing fog","Freezing  Mist","freezing mist","FREEZING MIST","freezing spray","FREEZING SPRAY","Freezing Spray")),
as.character(c("Ice Storm","ICE STORM","ice storm","freezing rain","freezing sleet","FREEZING RAIN","FREEZING SLEET","freezing rain","freezing sleet")),
as.character(c("Heavy Rain","HEAVY RAIN","heavy rain","excessive rain","heavy precipitation","downpour","cloudburst","rainstorm","extreme rain")),
as.character(c("Dust Devil","DUST DEVIL","dust devil","Dustdevil","DUSTDEVIL","dustdevil"," Dust-devil","DUST-DEVIL","dust-devil")),
as.character(c("Lightning","LIGHTNING","lightning","lightening","LIGHTENING","Lightening","lighning","LIGHNING","Lighning")),
as.character(c("Frost/Freeze","FROST/FREEZE","frost/freeze","frost","freeze","FROST","FREEZE","Frost","Freeze")),
as.character(c("Lake-Effect Snow","LAKE-EFFECT SNOW","lake-effect snow","lake-effect","lake effect","LAKE-EFFECT","LAKE EFFECT","Lake-Effect","Lake Effect","Lake-effect","Lake effect")),
as.character(c("Lakeshore Flood","LAKESHORE FLOOD","lakeshore flood","lake shore","LAKE SHORE","Lake Shore","Lake shore","lake-shore","LAKE-SHORE","Lake-Shore","Lake-shore")),
as.character(c("Avalanche","AVALANCHE","avalanche","avalache","Avalache","AVALACHE","snow slide","SNOW SLIDE","Snow Slide","snowslide","SNOWSLIDE","Snowslide")),
as.character(c("Hurricane (Typhoon)","HURRICANE (TYPHOON)","hurricane (typhoon)","hurricane","HURRICANE","Hurricane","typhoon","TYPHOON","Typhoon","Tropical Cyclone","TROPICAL CYCLONE","Tropical Cyclone","typhon","TYPHON","Typhon")),
as.character(c("Astronomical Low Tide","ASTRONOMICAL LOW TIDE","astronomical low tide","astronomical","astronomical low","low water","low tide","ASTRONOMICAL","ASTRONOMICAL LOW","LOW WATER","LOW TIDE","Astronomical","Astronomical Low","Low Water","Low Tide")),
as.character(c("Dust Storm","DUST STORM","dust storm","blowing dust","blowing sand","dusty wind","windborne dust","wind-borne dust","BLOWING DUST","BLOWING SAND","DUSTY WIND","WINDBORNE DUST","WIND-BORNE DUST","Blowing Dust","Blowing Sand","Dusty Wind","Windborne Dust","Wind-Borne Dust")),
as.character(c("Storm Surge/Tide","STORM SURGE/TIDE","storm surge/tide","Storm Surge","storm surge","STORM SURGE","Storm surge","Storm-Surge","storm-surge","STORM-SURGE","Storm-surge","StormSurge","stormsurge","STORMSURGE","Stormsurge","Storm Tide","storm tide","STORM TIDE","Storm tide","Storm-Tide","storm-tide","STORM-TIDE","Storm-tide","StormTide","stormtide","STORMTIDE","Stormtide")),
as.character(c("Drought","DROUGHT","drought","no rainfall","dry conditions","lack of precipitation","no precipitation","low moisture","dry soil","NO RAINFALL","DRY CONDITIONS","LACK OF PRECIPITATION","NO PRECIPITATION","LOW MOISTURE","DRY SOIL","No Rainfall","Dry Conditions","Lack Of Precipitation","No Precipitation","Low Moisture","Dry Soil","No Rainfall","Dry Conditions","Lack Of Precipitation","No Precipitation","Low Moisture","Dry Soil","No rainfall","Dry conditions","Lack of precipitation","No precipitation","Low moisture","Dry soil")),
as.character(c("Wildfire","WILDFIRE","wildfire","forest fire","range fire","prairie fire","brush fire","grass fire","uncontrolled fire","crown fire","scrub fire","FOREST FIRE","RANGE FIRE","PRAIRIE FIRE","BRUSH FIRE","GRASS FIRE","UNCONTROLLED FIRE","CROWN FIRE","SCRUB FIRE","Forest Fire","Range Fire","Prairie Fire","Brush Fire","Grass Fire","Uncontrolled Fire","Crown Fire","Scrub Fire","Forest fire","Range fire","Prairie fire","Brush fire","Grass fire","Uncontrolled fire","Crown fire","Scrub fire")),
as.character(c("Debris Flow","DEBRIS FLOW","debris flow","landslide","land slide","mudslide","mud slide","rockslide","rock slide","slide","rockfall","rock fall","slump","mud flow","mudflow","LANDSLIDE","LAND SLIDE","MUDSLIDE","MUD SLIDE","ROCKSLIDE","ROCK SLIDE","SLIDE","ROCKFALL","ROCK FALL","SLUMP","MUD FLOW","MUDFLOW","Landslide","Land Slide","Mudslide","Mud Slide","Rockslide","Rock Slide","Slide","Rockfall","Rock Fall","Slump","Mud Flow","Mudflow")),
as.character(c("Rip Current","RIP CURRENT","rip current","undertow","undercurrent","rip-tide","tide-rip","cross-current","cross current","rip tide","riptide","crosstide","rip-current","UNDERTOW","UNDERCURRENT","RIP-TIDE","TIDE-RIP","CROSS-CURRENT","CROSS CURRENT","RIP TIDE","RIPTIDE","CROSSTIDE","RIP-CURRENT","Undertow","Undercurrent","Rip-Tide","Tide-Rip","Cross-Current","Cross Current","Rip Tide","Riptide","Crosstide","Rip-Current","undertow","Undercurrent","Rip-tide","Tide-rip","Cross-current","Cross current","Rip tide","Riptide","Crosstide","Rip-current")),
as.character(c("Strong Wind","STRONG WIND","strong wind")),
as.character(c("High Wind","HIGH WIND","high wind")),
as.character(c("Flood","FLOOD","flood")),
as.character(c("Hail","HAIL","hail")),
as.character(c("Winter Weather","WINTER WEATHER","winter weather","Winter","WINTER","winter")),
as.character(c("Thunderstorm Wind","THUNDERSTORM WIND","thunderstorm wind","TSTM Wind","TSTM wind","TSTM WIND","tstm wind","TSTM wind")),
as.character(c("Cold/Wind Chill","COLD/WIND CHILL","cold/wind chill","wind chill","low temperature","WIND CHILL","LOW TEMPERATURE","Wind Chill","Low Temperature")),
as.character(c("Heat","HEAT","heat","Heat","HEAT","heat","Hot","HOT","hot","high temperature","High Temperature","HIGH TEMPERATURE","warm","WARM","Warm")),
as.character(c("Current","CURRENT","current")),
as.character(c("Rain","RAIN","rain")),
as.character(c("Snow","SNOW","snow")),
as.character(c("Tide","TIDE","tide")),
as.character(c("Wind","WIND","wind")),
as.character(c("Swell","SWELL","swell")),
as.character(c("Waves","WAVES","waves")),
as.character(c("Seas","SEAS","seas")),
as.character(c("Thunderstorm","THUNDERSTORM","thunderstorm","Thunder Storm","THUNDER STORM","Thunder storm","thunder storm"))
)
##Temporary counter to confirm basic principle
for (i in 1:57) {
CompareVector<-StandardizedVectorList[[i]]
Count<-0
for (j in 1:length(CompareVector)) {
Count<-Count+sum(grepl(CompareVector[j],UsedEVTYPES))
}
Type<-CompareVector[1]
print(Type); print(Count)
}
grepl(CompareVector[53],UsedEVTYPES[150])
CompareVector<-StandardizedVectorList[[53]]
grepl(CompareVector[1],UsedEVTYPES[150])
grepl(CompareVector[2],UsedEVTYPES[150])
install.packages("caret")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("kernlab")
library("kernlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data(spam)
head(spam)
plot(density(spam$your[spam$type=="nonspam"]),col="blue",main="",xlab="Freq('your')")
lines(density(spam$your[spam$type=="spam"]),col="red")
abline(v=(1/2),col="black")
prediction<-ifelse(spam$your>1/2,"spam","ham")
table(prediction,spam$type/length(spam$type))
table(prediction,spam$type)/length(spam$type)
?prediction()
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
?createDataPartition()
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
install.packages("e1071")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
set.seed(32343)
elFit <- train(type ~.,data=training, method="glm")
modelFit
warnings()
elFit
elFit$finalModel
predict(elFit,newdata=testing)
confusionMatrix(predictions,testing$type)
predictions <- predict(elFit,newdata=testing)
confusionMatrix(predictions,testing$type)
?sapply()
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library("AppliedPredictiveModeling", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data(AlzheimerDisease)
?data.frame()
head(diagnosis)
head(predictors)
dim(diagnosis)
summary(diagnosis)
summary(predictors)
nrow(predictors)
length(diagnosis)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
?createDataPartition()
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
log(.001)
log(0)
hist(log(training$Superplasticizer + 1/20000))
View(adData)
View(adData)
rm(concrete,mixtures,predictors,spam,testIndex,testing,training)
rm(elFit,inTrain,prediction, predictions,trainIndex)
names(adData)
ShrunkAz<-data.frame()
rm(ShrunkAz)
ShrunkAz<-adData[,58:69]
rm(ShrunkAz)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
ShrunkAz<-training[,58:69]
?preProcess()
AzComponents<-preProcess(ShrunkAz,method="pca",thresh=.80)
AzComponents
ILTrain<-training[,c(1,58:69)]
head(ILTrain)
NakedVariables<- train(diagnosis ~ .,
method = "glm",data=training)
warnings()
NakedFinal <- NakedVariables$finalModel
print(NakedFinal)
NakedVariables<- train(diagnosis ~ .,
method = "glm",data=ILTrain)
NakedFinal <- NakedVariables$finalModel
print(NakedFinal)
NakedVariables
names(NakedVariables)
NakedVariables$pred
NakedPrediction<-predict(NakedVariables,testing)
confusionMatrix(NakedPrediction)
NakedPrediction
?confusionMatrix.table(NakedPrediction)
confusionMatrix.table(NakedPrediction)
confusionMatrix(NakedPrediction,testing$diagnosis)
PCATrain<-preProcess(ILTrain,method="pca",pcaComp=7)
head(PCATrain)
PCAVariables<-predict(PCATrain,ILTrain)
head(PCAVariables)
PCAFit<-<- train(diagnosis ~ .,method = "glm",data=PCAVariables)
PCAFit<- train(diagnosis ~ .,method = "glm",data=PCAVariables)
PCAPrediction<-predict(PCAFit,testing)
PCATestVariables<-predict(PCATrain,testing)
PCAPrediction<-predict(PCAFit,PCATestVariables)
confusionMatrix(PCAPrediction,testing$diagnosis)
rm(testing,training,AzComponents,diagnosis,inTrain,NakedFinal,NakedPrediction,NakedVariables,PCAFit,PCAPrediction,PCATestVariables,PCATrain,PCAVariables)
rm(adData,ILTrain,predictors,ShrunkAz)
?library()
##Library Calls
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(plyr))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(magrittr))
suppressPackageStartupMessages(library(chron))
## Establish functions NaRmMean and NaRmMedian
NaRmMean<-function(x){mean(x,na.rm=TRUE)}
NaRmMedian<-function(x){median(x,na.rm=TRUE)}
ActivityZipped<-tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",ActivityZipped,"curl")
##Read data into dataset
ActivityData<-data.table()
ActivityData<-read.csv(unz(ActivityZipped,"activity.csv"))
##First inspection
summary(ActivityData)
PercentStepsMissing<-100*2304/17568
PercentStepsMissing<-100*sum(is.na(ActivityData$steps))/nrow(ActivityData)
ActivityDataNAs<-data.table()
ActivityDataNAs<-ActivityData[is.na(ActivityData$steps),]
WhichDatesMissingSteps<-as.Date(unique(ActivityDataNAs$date))
NumberDatesMissingSteps<-length(WhichDatesMissingSteps)
WhichDaysMissingSteps<-weekdays(WhichDatesMissingSteps)
ActivityData$steps<-as.numeric(ActivityData$steps) #convert steps
ActivityData$date<-as.Date(ActivityData$date) #convert dates
##Conversion of intervals is a bit trickier as they are not in a consistent
##character format that function "times" can use.
ActivityData$hour<-as.integer(ActivityData$interval/100) #extract hour
ActivityData$minutes<-ActivityData$interval-100*ActivityData$hour #extract minutes
ActivityData$CharacterHour<-as.character(ActivityData$hour) #convert hour to character
ActivityData$CharacterMinutes<-as.character(ActivityData$minutes) #convert minutes to character
Leader<-"0" #to be applied for low values in creating consistent character times
Trailer<-"00" #attach to times to create seconds
#attach Leader to CharacterHour and CharacterMinute for values <10
for (j in 1:nrow(ActivityData)) {
if (ActivityData$hour[j]<10) {
ActivityData$CharacterHour[j]<-paste(Leader,ActivityData$CharacterHour[j],sep="")
}
if (ActivityData$minutes[j]<10) { #attach Leader to CharacterMinutes for values <10
ActivityData$CharacterMinutes[j]<-paste(Leader,ActivityData$CharacterMinutes[j],sep="")
}
}
#assemble character-class interval
ActivityData$interval<-as.character(paste(ActivityData$CharacterHour,ActivityData$CharacterMinutes,Trailer, sep=":"))
ActivityData$interval<-times(ActivityData$interval) #convert interval to class "times"
#Establish and fill out DayType variable for later.
ActivityData$DayType<-"Weekday"
ActivityData$DayOWk<-weekdays(ActivityData$date,abbreviate=TRUE)
ActivityData$IsWeekend<-ActivityData$DayOWk=="Sat" | ActivityData$DayOWk=="Sun"
ActivityData$DayType[ActivityData$IsWeekend]<-"Weekend"
View(ActivityData)
ActivityData$steps<-as.numeric(ActivityData$steps) #convert steps
##Conversion of intervals is tricky as they are not in a consistent
##character format that function "times" can use.
ActivityData$hour<-as.integer(ActivityData$interval/100) #extract hour
ActivityData$minutes<-ActivityData$interval-100*ActivityData$hour #extract minutes
ActivityData$CharacterHour<-as.character(ActivityData$hour) #convert hour to character
ActivityData$CharacterMinutes<-as.character(ActivityData$minutes) #convert minutes to character
Leader<-"0" #to be applied for low values in creating consistent character times
Trailer<-"00" #attach to times to create seconds
#attach Leader to CharacterHour and CharacterMinute for values <10
for (j in 1:nrow(ActivityData)) {
if (ActivityData$hour[j]<10) {
ActivityData$CharacterHour[j]<-paste(Leader,ActivityData$CharacterHour[j],sep="")
}
if (ActivityData$minutes[j]<10) { #attach Leader to CharacterMinutes for values <10
ActivityData$CharacterMinutes[j]<-paste(Leader,ActivityData$CharacterMinutes[j],sep="")
}
}
#assemble character-class interval
ActivityData$interval<-as.character(paste(ActivityData$CharacterHour,ActivityData$CharacterMinutes,Trailer, sep=":"))
ActivityData$interval<-times(ActivityData$interval) #convert interval to class "times"
#Convert dates
ActivityData$date<-as.character(ActivityData$date) #convert dates to char from factor
ActivityData$date<-chron(ActivityData$date,ActivityData$interval,format=c(dates="y-m-d",times="h:m:s"),"day mon year") #combine data and interval for single sortable date+time
#Establish and fill out DayType variable for later.
ActivityData$DayType<-"Weekday"
ActivityData$DayOWk<-weekdays(ActivityData$date,abbreviate=TRUE)
ActivityData$IsWeekend<-ActivityData$DayOWk=="Sat" | ActivityData$DayOWk=="Sun"
ActivityData$DayType[ActivityData$IsWeekend]<-"Weekend"
##Acquire data
ActivityZipped<-tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",ActivityZipped,"curl")
##Read data into dataset
ActivityData<-data.table()
ActivityData<-read.csv(unz(ActivityZipped,"activity.csv"))
##First inspection
summary(ActivityData)
PercentStepsMissing<-100*sum(is.na(ActivityData$steps))/nrow(ActivityData)
ActivityDataNAs<-data.table()
ActivityDataNAs<-ActivityData[is.na(ActivityData$steps),]
WhichDatesMissingSteps<-as.Date(unique(ActivityDataNAs$date))
NumberDatesMissingSteps<-length(WhichDatesMissingSteps)
WhichDaysMissingSteps<-weekdays(WhichDatesMissingSteps)
ActivityData$steps<-as.numeric(ActivityData$steps) #convert steps
#Convert dates
ActivityData$date<-as.character(ActivityData$date) #convert dates to char from factor
ActivityData$date<-chron(ActivityData$date,format=c(dates="y-m-d",times="h:m:s"),"day mon year")
##Conversion of intervals is tricky as they are not in a consistent
##character format that function "times" can use.
ActivityData$hour<-as.integer(ActivityData$interval/100) #extract hour
ActivityData$minutes<-ActivityData$interval-100*ActivityData$hour #extract minutes
ActivityData$CharacterHour<-as.character(ActivityData$hour) #convert hour to character
ActivityData$CharacterMinutes<-as.character(ActivityData$minutes) #convert minutes to character
Leader<-"0" #to be applied for low values in creating consistent character times
Trailer<-"00" #attach to times to create seconds
#attach Leader to CharacterHour and CharacterMinute for values <10
for (j in 1:nrow(ActivityData)) {
if (ActivityData$hour[j]<10) {
ActivityData$CharacterHour[j]<-paste(Leader,ActivityData$CharacterHour[j],sep="")
}
if (ActivityData$minutes[j]<10) { #attach Leader to CharacterMinutes for values <10
ActivityData$CharacterMinutes[j]<-paste(Leader,ActivityData$CharacterMinutes[j],sep="")
}
}
#assemble character-class interval
ActivityData$interval<-as.character(paste(ActivityData$CharacterHour,ActivityData$CharacterMinutes,Trailer, sep=":"))
ActivityData$interval<-as.factor(ActivityData$interval) #convert interval to a factor for simpler analysis
#Establish and fill out DayType variable for later.
ActivityData$DayType<-"Weekday"
ActivityData$DayOWk<-weekdays(ActivityData$date,abbreviate=TRUE)
ActivityData$IsWeekend<-ActivityData$DayOWk=="Sat" | ActivityData$DayOWk=="Sun"
ActivityData$DayType[ActivityData$IsWeekend]<-"Weekend"
##Acquire data
ActivityZipped<-tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",ActivityZipped,"curl")
##Read data into dataset
ActivityData<-data.table()
ActivityData<-read.csv(unz(ActivityZipped,"activity.csv"))
##First inspection
View(ActivityData)
ActivityData$date<-as.Date(ActivityData$date)
View(ActivityData)
ActivityData$date<-chron(ActivityData$date)
##Acquire data
ActivityZipped<-tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",ActivityZipped,"curl")
##Read data into dataset
ActivityData<-data.table()
ActivityData<-read.csv(unz(ActivityZipped,"activity.csv"))
##First inspection
View(ActivityData)
ActivityData$date<-as.character(ActivityData$date)
View(ActivityData)
ActivityData$date<-chron(ActivityData$date)
##Acquire data
ActivityZipped<-tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",ActivityZipped,"curl")
##Read data into dataset
ActivityData<-data.table()
ActivityData<-read.csv(unz(ActivityZipped,"activity.csv"))
##First inspection
ActivityData$date<-as.character(ActivityData$date)
ActivityData$date<-chron(dates=ActivityData$date,format="y-m-d")
View(ActivityData)
ActivityData$hour<-as.integer(ActivityData$interval/100) #extract hour
ActivityData$minutes<-ActivityData$interval-100*ActivityData$hour #extract minutes
ActivityData$CharacterHour<-as.character(ActivityData$hour) #convert hour to character
ActivityData$CharacterMinutes<-as.character(ActivityData$minutes) #convert minutes to character
Leader<-"0" #to be applied for low values in creating consistent character times
#attach Leader to CharacterHour and CharacterMinute for values <10
for (j in 1:nrow(ActivityData)) {
if (ActivityData$hour[j]<10) {
ActivityData$CharacterHour[j]<-paste(Leader,ActivityData$CharacterHour[j],sep="")
}
if (ActivityData$minutes[j]<10) { #attach Leader to CharacterMinutes for values <10
ActivityData$CharacterMinutes[j]<-paste(Leader,ActivityData$CharacterMinutes[j],sep="")
}
}
#assemble character-class interval
ActivityData$interval<-as.character(paste(ActivityData$CharacterHour,ActivityData$CharacterMinutes,Trailer, sep=":"))
ActivityData$interval<-as.factor(ActivityData$interval)
View(ActivityData)
ActivityZipped<-tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",ActivityZipped,"curl")
##Read data into dataset
ActivityData<-data.table()
ActivityData<-read.csv(unz(ActivityZipped,"activity.csv"))
##First inspection
View(ActivityData)
ActivityData$steps<-as.numeric(ActivityData$steps) #convert steps
#Convert dates
ActivityData$date<-as.character(ActivityData$date) #convert dates to char from factor
ActivityData$date<-chron(dates=ActivityData$date,format="y-m-d")
ActivityData$date<-as.Date(ActivityData$date)
##Intervals need to be converted to factors so that plot or ggplot2 won't interpolate nonsense values like "1275"
ActivityData$hour<-as.integer(ActivityData$interval/100) #extract hour
ActivityData$minutes<-ActivityData$interval-100*ActivityData$hour #extract minutes
ActivityData$CharacterHour<-as.character(ActivityData$hour) #convert hour to character
ActivityData$CharacterMinutes<-as.character(ActivityData$minutes) #convert minutes to character
Leader<-"0" #to be applied for low values in creating consistent character times
#attach Leader to CharacterHour and CharacterMinute for values <10
for (j in 1:nrow(ActivityData)) {
if (ActivityData$hour[j]<10) {
ActivityData$CharacterHour[j]<-paste(Leader,ActivityData$CharacterHour[j],sep="")
}
if (ActivityData$minutes[j]<10) { #attach Leader to CharacterMinutes for values <10
ActivityData$CharacterMinutes[j]<-paste(Leader,ActivityData$CharacterMinutes[j],sep="")
}
}
#assemble character-class interval
ActivityData$interval<-as.character(paste(ActivityData$CharacterHour,ActivityData$CharacterMinutes,sep=":"))
ActivityData$interval<-as.factor(ActivityData$interval) #convert interval to a factor for simpler analysis
#Establish and fill out DayType variable for later.
ActivityData$DayType<-"Weekday"
ActivityData$DayOWk<-weekdays(ActivityData$date,abbreviate=TRUE)
ActivityData$IsWeekend<-ActivityData$DayOWk=="Sat" | ActivityData$DayOWk=="Sun"
ActivityData$DayType[ActivityData$IsWeekend]<-"Weekend"
View(ActivityData)
ActivityData<-ActivityData[,c(1:3,8)]
View(ActivityData)
?as.Date()
ActivityZipped<-tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",ActivityZipped,"curl")
##Read data into dataset
ActivityData<-data.table()
ActivityData<-read.csv(unz(ActivityZipped,"activity.csv"))
ActivityData$steps<-as.numeric(ActivityData$steps) #convert steps
#Convert dates
ActivityData$date<-as.character(ActivityData$date) #convert dates to char from factor
ActivityData$date<-dates(dates=ActivityData$date,format="y-m-d")
##Intervals need to be converted to factors so that plot or ggplot2 won't interpolate nonsense values like "1275"
ActivityData$hour<-as.integer(ActivityData$interval/100) #extract hour
ActivityData$minutes<-ActivityData$interval-100*ActivityData$hour #extract minutes
ActivityData$CharacterHour<-as.character(ActivityData$hour) #convert hour to character
ActivityData$CharacterMinutes<-as.character(ActivityData$minutes) #convert minutes to character
Leader<-"0" #to be applied for low values in creating consistent character times
#attach Leader to CharacterHour and CharacterMinute for values <10
for (j in 1:nrow(ActivityData)) {
if (ActivityData$hour[j]<10) {
ActivityData$CharacterHour[j]<-paste(Leader,ActivityData$CharacterHour[j],sep="")
}
if (ActivityData$minutes[j]<10) { #attach Leader to CharacterMinutes for values <10
ActivityData$CharacterMinutes[j]<-paste(Leader,ActivityData$CharacterMinutes[j],sep="")
}
}
#assemble character-class interval
ActivityData$interval<-as.character(paste(ActivityData$CharacterHour,ActivityData$CharacterMinutes,sep=":"))
ActivityData$interval<-as.factor(ActivityData$interval) #convert interval to a factor for simpler analysis
#Establish and fill out DayType variable for later.
ActivityData$DayType<-"Weekday"
ActivityData$DayOWk<-weekdays(ActivityData$date,abbreviate=TRUE)
ActivityData$IsWeekend<-ActivityData$DayOWk=="Sat" | ActivityData$DayOWk=="Sun"
ActivityData$DayType[ActivityData$IsWeekend]<-"Weekend"
#Clean up working variables
ActivityData<-ActivityData[,c(1:3,8)]
ActivityZipped<-tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",ActivityZipped,"curl")
##Read data into dataset
ActivityData<-data.table()
ActivityData<-read.csv(unz(ActivityZipped,"activity.csv"))
##First inspection
ActivityData$steps<-as.numeric(ActivityData$steps) #convert steps
#Convert dates
ActivityData$date<-as.character(ActivityData$date) #convert dates to char from factor
ActivityData$date<-chron(dates=ActivityData$date,format="y-m-d")
##Intervals need to be converted to factors so that plot or ggplot2 won't interpolate nonsense values like "1275"
ActivityData$hour<-as.integer(ActivityData$interval/100) #extract hour
ActivityData$minutes<-ActivityData$interval-100*ActivityData$hour #extract minutes
ActivityData$CharacterHour<-as.character(ActivityData$hour) #convert hour to character
ActivityData$CharacterMinutes<-as.character(ActivityData$minutes) #convert minutes to character
Leader<-"0" #to be applied for low values in creating consistent character times
#attach Leader to CharacterHour and CharacterMinute for values <10
for (j in 1:nrow(ActivityData)) {
if (ActivityData$hour[j]<10) {
ActivityData$CharacterHour[j]<-paste(Leader,ActivityData$CharacterHour[j],sep="")
}
if (ActivityData$minutes[j]<10) { #attach Leader to CharacterMinutes for values <10
ActivityData$CharacterMinutes[j]<-paste(Leader,ActivityData$CharacterMinutes[j],sep="")
}
}
#assemble character-class interval
ActivityData$interval<-as.character(paste(ActivityData$CharacterHour,ActivityData$CharacterMinutes,sep=":"))
ActivityData$interval<-as.factor(ActivityData$interval) #convert interval to a factor for simpler analysis
#Establish and fill out DayType variable for later.
ActivityData$DayType<-"Weekday"
ActivityData$DayOWk<-weekdays(ActivityData$date,abbreviate=TRUE)
ActivityData$IsWeekend<-ActivityData$DayOWk=="Sat" | ActivityData$DayOWk=="Sun"
ActivityData$DayType[ActivityData$IsWeekend]<-"Weekend"
#Clean up working variables
ActivityData<-ActivityData[,c(1:3,8)]
View(ActivityData)
?aes()
?times()
ls
ls()
list.files()
list.files(fullnames=TRUE)
list.files(full.names=TRUE)
knit2html("./PA1_template.Rmd")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
knit2html("./PA1_template.Rmd")
list.files()
setwd("~/Desktop/Data Science Certificate Project/Data Science Project Working Directory/RepData_PeerAssessment1")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
list.files()
list.files(full.names=TRUE)
knit2html("./PA1_template.Rmd")
knit2html("./PA1_template.Rmd")
knit2html("./PA1_template.Rmd")
